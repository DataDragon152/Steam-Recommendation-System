{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyM4yVYGOd3SJ949ZsvMlTE/"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":21,"metadata":{"id":"VWidb8QPhmOR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1745388126131,"user_tz":-420,"elapsed":5407,"user":{"displayName":"Long Nguyen","userId":"14589141717299064407"}},"outputId":"3c7318e1-4293-4dce-9359-a1957ff1beed"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive', force_remount=True)"]},{"cell_type":"code","source":["# Install necessary packages\n","!pip install scikit-learn pandas nltk joblib --quiet"],"metadata":{"id":"dpBqu6dwt1LF","executionInfo":{"status":"ok","timestamp":1745388129241,"user_tz":-420,"elapsed":3112,"user":{"displayName":"Long Nguyen","userId":"14589141717299064407"}}},"execution_count":22,"outputs":[]},{"cell_type":"code","source":["!pip install pandas joblib scikit-learn --quiet"],"metadata":{"id":"5M6Cc1feO6Bu","executionInfo":{"status":"ok","timestamp":1745388133060,"user_tz":-420,"elapsed":3817,"user":{"displayName":"Long Nguyen","userId":"14589141717299064407"}}},"execution_count":23,"outputs":[]},{"cell_type":"code","source":["# Imports\n","import pandas as pd\n","import nltk\n","import os\n","from sklearn.model_selection import train_test_split\n","from sklearn.feature_extraction.text import TfidfVectorizer\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.metrics import classification_report\n","import joblib\n","from nltk.sentiment.vader import SentimentIntensityAnalyzer"],"metadata":{"id":"VpgSwwRDt1NU","executionInfo":{"status":"ok","timestamp":1745388133074,"user_tz":-420,"elapsed":17,"user":{"displayName":"Long Nguyen","userId":"14589141717299064407"}}},"execution_count":24,"outputs":[]},{"cell_type":"code","source":["# Download lexicon for VADER\n","nltk.download('vader_lexicon')\n","sentiment_tool = SentimentIntensityAnalyzer()\n","\n","# Define folder path and list of files\n","folder_path = '/content/drive/MyDrive/Steam Analysis/Filtered Data/'\n","file_list = [\n","    'part1_filtered.csv',\n","    'part2_filtered.csv',\n","    'part3_filtered.csv',\n","    'part4_filtered.csv',\n","    'part5_filtered.csv',\n","    'part6_filtered.csv',\n","    'part7_filtered.csv',\n","    'part8_filtered.csv',\n","    'part9_filtered.csv',\n","    'part10_filtered.csv',\n","    'part11_filtered.csv',\n","    'part12_filtered.csv',\n","    'part13_filtered.csv',\n","    'part14_filtered.csv',\n","    'part15_filtered.csv',\n","    'part16_filtered.csv',\n","    'part17_filtered.csv',\n","    'part18_filtered.csv',\n","    'part19_filtered.csv',\n","    'part20_filtered.csv',\n","    'part21_filtered.csv',\n","    'part22_filtered.csv',\n","    'part23_filtered.csv',\n","    'part24_filtered.csv',\n","    'part25_filtered.csv',\n","    'part26_filtered.csv',\n","    'part27_filtered.csv',\n","    'part28_filtered.csv',\n","    'part29_filtered.csv',\n","    'part30_filtered.csv'\n","]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CRw38pTst1P5","executionInfo":{"status":"ok","timestamp":1745388133393,"user_tz":-420,"elapsed":315,"user":{"displayName":"Long Nguyen","userId":"14589141717299064407"}},"outputId":"187231c7-f406-44b1-cb12-3dd90dda7089"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stderr","text":["[nltk_data] Downloading package vader_lexicon to /root/nltk_data...\n","[nltk_data]   Package vader_lexicon is already up-to-date!\n"]}]},{"cell_type":"code","source":["# Load and combine all files\n","all_reviews = []\n","for file_name in file_list:\n","    file_path = os.path.join(folder_path, file_name)\n","    df = pd.read_csv(file_path)\n","    df = df[df['review'].notnull()]\n","    df = df[df['review'].apply(lambda x: isinstance(x, str) and len(x.split()) >= 5)]\n","    all_reviews.append(df)\n","\n","combined_df = pd.concat(all_reviews, ignore_index=True)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NNeJMhmlt1SK","executionInfo":{"status":"ok","timestamp":1745388261215,"user_tz":-420,"elapsed":127819,"user":{"displayName":"Long Nguyen","userId":"14589141717299064407"}},"outputId":"eb1fc066-b17a-4047-af3e-e1d948d58af1"},"execution_count":26,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-26-62229f3ce5bb>:5: DtypeWarning: Columns (12,13,14,15,16,17,18,19,20,21,22,23) have mixed types. Specify dtype option on import or set low_memory=False.\n","  df = pd.read_csv(file_path)\n","<ipython-input-26-62229f3ce5bb>:5: DtypeWarning: Columns (12,13,14,15,16,17) have mixed types. Specify dtype option on import or set low_memory=False.\n","  df = pd.read_csv(file_path)\n","<ipython-input-26-62229f3ce5bb>:5: DtypeWarning: Columns (12,13,14,15,16,17,18,19) have mixed types. Specify dtype option on import or set low_memory=False.\n","  df = pd.read_csv(file_path)\n","<ipython-input-26-62229f3ce5bb>:5: DtypeWarning: Columns (12,13,14,15,16,17,18,19,20) have mixed types. Specify dtype option on import or set low_memory=False.\n","  df = pd.read_csv(file_path)\n","<ipython-input-26-62229f3ce5bb>:5: DtypeWarning: Columns (12,13,14,15,16,17,18,19,20,21,22,23) have mixed types. Specify dtype option on import or set low_memory=False.\n","  df = pd.read_csv(file_path)\n","<ipython-input-26-62229f3ce5bb>:5: DtypeWarning: Columns (12,13) have mixed types. Specify dtype option on import or set low_memory=False.\n","  df = pd.read_csv(file_path)\n","<ipython-input-26-62229f3ce5bb>:5: DtypeWarning: Columns (12,13) have mixed types. Specify dtype option on import or set low_memory=False.\n","  df = pd.read_csv(file_path)\n","<ipython-input-26-62229f3ce5bb>:5: DtypeWarning: Columns (12,13,14,15,16,17,18,19,20,21,22,23) have mixed types. Specify dtype option on import or set low_memory=False.\n","  df = pd.read_csv(file_path)\n","<ipython-input-26-62229f3ce5bb>:5: DtypeWarning: Columns (12) have mixed types. Specify dtype option on import or set low_memory=False.\n","  df = pd.read_csv(file_path)\n","<ipython-input-26-62229f3ce5bb>:5: DtypeWarning: Columns (12,13,14,15,16,17,18,19,20,21,22,23) have mixed types. Specify dtype option on import or set low_memory=False.\n","  df = pd.read_csv(file_path)\n","<ipython-input-26-62229f3ce5bb>:5: DtypeWarning: Columns (12,13) have mixed types. Specify dtype option on import or set low_memory=False.\n","  df = pd.read_csv(file_path)\n","<ipython-input-26-62229f3ce5bb>:5: DtypeWarning: Columns (12,13,14) have mixed types. Specify dtype option on import or set low_memory=False.\n","  df = pd.read_csv(file_path)\n","<ipython-input-26-62229f3ce5bb>:5: DtypeWarning: Columns (12,13,14,15,16) have mixed types. Specify dtype option on import or set low_memory=False.\n","  df = pd.read_csv(file_path)\n","<ipython-input-26-62229f3ce5bb>:5: DtypeWarning: Columns (12,13,14,15,16) have mixed types. Specify dtype option on import or set low_memory=False.\n","  df = pd.read_csv(file_path)\n","<ipython-input-26-62229f3ce5bb>:5: DtypeWarning: Columns (12,13,14,15,16,17,18,19,20) have mixed types. Specify dtype option on import or set low_memory=False.\n","  df = pd.read_csv(file_path)\n","<ipython-input-26-62229f3ce5bb>:5: DtypeWarning: Columns (12,13,14,15,16,17,18,19) have mixed types. Specify dtype option on import or set low_memory=False.\n","  df = pd.read_csv(file_path)\n","<ipython-input-26-62229f3ce5bb>:5: DtypeWarning: Columns (12,13,14,15,16,17,18,19,20,21,22,23) have mixed types. Specify dtype option on import or set low_memory=False.\n","  df = pd.read_csv(file_path)\n","<ipython-input-26-62229f3ce5bb>:5: DtypeWarning: Columns (12,13,14,15,16) have mixed types. Specify dtype option on import or set low_memory=False.\n","  df = pd.read_csv(file_path)\n","<ipython-input-26-62229f3ce5bb>:5: DtypeWarning: Columns (12,13,14,15,16,17,18,19,20,21,22,23) have mixed types. Specify dtype option on import or set low_memory=False.\n","  df = pd.read_csv(file_path)\n","<ipython-input-26-62229f3ce5bb>:5: DtypeWarning: Columns (12,13,14) have mixed types. Specify dtype option on import or set low_memory=False.\n","  df = pd.read_csv(file_path)\n","<ipython-input-26-62229f3ce5bb>:5: DtypeWarning: Columns (12,13,14,15,16) have mixed types. Specify dtype option on import or set low_memory=False.\n","  df = pd.read_csv(file_path)\n","<ipython-input-26-62229f3ce5bb>:5: DtypeWarning: Columns (12,13,14,15,16,17,18,19,20,21,22,23) have mixed types. Specify dtype option on import or set low_memory=False.\n","  df = pd.read_csv(file_path)\n","<ipython-input-26-62229f3ce5bb>:5: DtypeWarning: Columns (12,13,14,15) have mixed types. Specify dtype option on import or set low_memory=False.\n","  df = pd.read_csv(file_path)\n","<ipython-input-26-62229f3ce5bb>:5: DtypeWarning: Columns (12,13,14) have mixed types. Specify dtype option on import or set low_memory=False.\n","  df = pd.read_csv(file_path)\n","<ipython-input-26-62229f3ce5bb>:5: DtypeWarning: Columns (12,13,14,15,16,17,18) have mixed types. Specify dtype option on import or set low_memory=False.\n","  df = pd.read_csv(file_path)\n","<ipython-input-26-62229f3ce5bb>:5: DtypeWarning: Columns (12,13,14) have mixed types. Specify dtype option on import or set low_memory=False.\n","  df = pd.read_csv(file_path)\n","<ipython-input-26-62229f3ce5bb>:5: DtypeWarning: Columns (12,13,14,15,16,17,18,19,20,21,22,23) have mixed types. Specify dtype option on import or set low_memory=False.\n","  df = pd.read_csv(file_path)\n","<ipython-input-26-62229f3ce5bb>:5: DtypeWarning: Columns (12,13,14,15,16,17) have mixed types. Specify dtype option on import or set low_memory=False.\n","  df = pd.read_csv(file_path)\n"]}]},{"cell_type":"code","source":["# Label using VADER\n","def label_review(text):\n","    if not isinstance(text, str):\n","        return 0\n","\n","    text_lower = text.lower()\n","\n","    # Strong sentiment triggers — preserve sharp opinions\n","    strong_expressions = ['trash', 'garbage', 'unplayable', 'broken', 'gud', 'bussing', 'fire', 'fr', 'goated', 'ass', 'cap', 'mid', 'l game', 'awesome', 'epic', 'w game', '/10', 'out of 10', 'bussin', 'goat', ' rad', 'slap', 'hidden gem', 'decent', 'addictive', 'peak', 'dope', 'favourite', 'shit', 'sh1t', 'spectacular', 'sussy']\n","    if any(phrase in text_lower for phrase in strong_expressions):\n","        return 1\n","\n","    score = sentiment_tool.polarity_scores(text)['compound']\n","    if score >= 0.2 or score <= -0.2:\n","        return 1  # meaningful (positive or negative)\n","    return 0  # neutral, not meaningful\n","\n","combined_df['label'] = combined_df['review'].apply(label_review)\n"],"metadata":{"id":"3Es3Tg4s5UyF","executionInfo":{"status":"ok","timestamp":1745389153763,"user_tz":-420,"elapsed":892545,"user":{"displayName":"Long Nguyen","userId":"14589141717299064407"}}},"execution_count":27,"outputs":[]},{"cell_type":"code","source":["# Prepare data\n","texts = combined_df['review'].values\n","labels = combined_df['label'].values\n","\n","# Train-test split\n","text_train, text_test, label_train, label_test = train_test_split(\n","    texts, labels, test_size=0.2, random_state=42\n",")"],"metadata":{"id":"-HrDlKQat1Uq","executionInfo":{"status":"ok","timestamp":1745389156215,"user_tz":-420,"elapsed":2443,"user":{"displayName":"Long Nguyen","userId":"14589141717299064407"}}},"execution_count":28,"outputs":[]},{"cell_type":"code","source":["# TF-IDF vectorization\n","vectorizer = TfidfVectorizer(max_features=10000, stop_words='english')\n","X_train = vectorizer.fit_transform(text_train)\n","X_test = vectorizer.transform(text_test)\n","\n","# Train model\n","model = LogisticRegression(max_iter=1000)\n","model.fit(X_train, label_train)\n","\n","# Evaluate model\n","predictions = model.predict(X_test)\n","print(classification_report(label_test, predictions))\n","\n","# Save model and vectorizer\n","joblib.dump(model, '/content/drive/MyDrive/Steam Analysis/sentiment_model.pkl')\n","joblib.dump(vectorizer, '/content/drive/MyDrive/Steam Analysis/tfidf_vectorizer.pkl')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7rh9iHXJzbMs","executionInfo":{"status":"ok","timestamp":1745389301687,"user_tz":-420,"elapsed":145471,"user":{"displayName":"Long Nguyen","userId":"14589141717299064407"}},"outputId":"9ad1e83f-2046-4ee9-8cf8-84682c0acde2"},"execution_count":29,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       0.85      0.75      0.79    191967\n","           1       0.95      0.97      0.96    975258\n","\n","    accuracy                           0.94   1167225\n","   macro avg       0.90      0.86      0.88   1167225\n","weighted avg       0.93      0.94      0.93   1167225\n","\n"]},{"output_type":"execute_result","data":{"text/plain":["['/content/drive/MyDrive/Steam Analysis/tfidf_vectorizer.pkl']"]},"metadata":{},"execution_count":29}]},{"cell_type":"code","source":["# Load model and vectorizer\n","model = joblib.load('/content/drive/MyDrive/Steam Analysis/sentiment_model.pkl')\n","vectorizer = joblib.load('/content/drive/MyDrive/Steam Analysis/tfidf_vectorizer.pkl')\n","\n","# File paths\n","folder_path = '/content/drive/MyDrive/Steam Analysis/Filtered Data/'\n","output_path = '/content/drive/MyDrive/Steam Analysis/Cleaned Data/'\n","os.makedirs(output_path, exist_ok=True)\n","\n","# List of 10 files to process\n","file_list = [\n","    f'part{str(i).zfill(2)}_filtered.csv' for i in range(111, 115)\n","]\n","\n","# Process and clean each file\n","for file_name in file_list:\n","    print(f'📄 Processing {file_name}')\n","    file_path = os.path.join(folder_path, file_name)\n","    df = pd.read_csv(file_path)\n","\n","    # Drop missing and short reviews (less than 3 words)\n","    df = df[df['review'].notnull()]\n","    df = df[df['review'].apply(lambda x: isinstance(x, str) and len(x.split()) >= 3)]\n","\n","    # Transform and predict\n","    X = vectorizer.transform(df['review'])\n","    df['predicted_label'] = model.predict(X)\n","\n","    # Filter meaningful reviews\n","    cleaned = df[df['predicted_label'] == 1]\n","    cleaned.drop(columns=['predicted_label'], inplace=True)\n","\n","    # Save only cleaned reviews\n","    cleaned.to_csv(os.path.join(output_path, f'cleaned_{file_name}'), index=False)\n","    print(f'✅ Saved: cleaned_{file_name} ({len(cleaned)} rows)')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dpAst5EYt1XG","executionInfo":{"status":"ok","timestamp":1745392957450,"user_tz":-420,"elapsed":48976,"user":{"displayName":"Long Nguyen","userId":"14589141717299064407"}},"outputId":"9872529a-1f97-461c-bfe0-a546286e327f"},"execution_count":43,"outputs":[{"output_type":"stream","name":"stdout","text":["📄 Processing part111_filtered.csv\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-43-cad2516cf758>:19: DtypeWarning: Columns (12,13) have mixed types. Specify dtype option on import or set low_memory=False.\n","  df = pd.read_csv(file_path)\n","<ipython-input-43-cad2516cf758>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  cleaned.drop(columns=['predicted_label'], inplace=True)\n"]},{"output_type":"stream","name":"stdout","text":["✅ Saved: cleaned_part111_filtered.csv (155331 rows)\n","📄 Processing part112_filtered.csv\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-43-cad2516cf758>:19: DtypeWarning: Columns (12,13,14) have mixed types. Specify dtype option on import or set low_memory=False.\n","  df = pd.read_csv(file_path)\n","<ipython-input-43-cad2516cf758>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  cleaned.drop(columns=['predicted_label'], inplace=True)\n"]},{"output_type":"stream","name":"stdout","text":["✅ Saved: cleaned_part112_filtered.csv (221132 rows)\n","📄 Processing part113_filtered.csv\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-43-cad2516cf758>:19: DtypeWarning: Columns (12) have mixed types. Specify dtype option on import or set low_memory=False.\n","  df = pd.read_csv(file_path)\n","<ipython-input-43-cad2516cf758>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  cleaned.drop(columns=['predicted_label'], inplace=True)\n"]},{"output_type":"stream","name":"stdout","text":["✅ Saved: cleaned_part113_filtered.csv (181867 rows)\n","📄 Processing part114_filtered.csv\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-43-cad2516cf758>:19: DtypeWarning: Columns (12,13,14) have mixed types. Specify dtype option on import or set low_memory=False.\n","  df = pd.read_csv(file_path)\n","<ipython-input-43-cad2516cf758>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  cleaned.drop(columns=['predicted_label'], inplace=True)\n"]},{"output_type":"stream","name":"stdout","text":["✅ Saved: cleaned_part114_filtered.csv (164577 rows)\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"5kiGXL-8t1Zh","executionInfo":{"status":"aborted","timestamp":1745389301837,"user_tz":-420,"elapsed":1181153,"user":{"displayName":"Long Nguyen","userId":"14589141717299064407"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"FHI2WTZYt1cl","executionInfo":{"status":"aborted","timestamp":1745389301842,"user_tz":-420,"elapsed":1181156,"user":{"displayName":"Long Nguyen","userId":"14589141717299064407"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"FEs9aqZIt1fS","executionInfo":{"status":"aborted","timestamp":1745389301845,"user_tz":-420,"elapsed":1181158,"user":{"displayName":"Long Nguyen","userId":"14589141717299064407"}}},"execution_count":null,"outputs":[]}]}